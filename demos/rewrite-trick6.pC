//////////////////////////////////////////////////////////////////////////////
//
//  This program demonstrate the use of the class GCRewriteCache
//  for setting up an external rewrite index for a collectable object.
//
//////////////////////////////////////////////////////////////////////////////

#include <iostream.h>
#include <stdlib.h>
#include <AD/strings/quark.h>
#include <AD/rewrite/gccache.h>

datatype Wff :: collectable
   = True             
   | False             
   | Var (class Quark)  =>  _
   | Op  (class Quark, Wff, Wff) => "(" 2 " " 1 " " 3 ")"
   | Not (Wff)          => "not (" _ ")"

law 
    inline And(a,b)     = Op(#"and",a,b)
and inline Or(a,b)      = Op(#"or",a,b)
and inline Implies(a,b) = Op(#"->",a, b)
and inline Xor(a,b)     = Op(#"xor",a,b)
and inline Equiv(a,b)   = Op(#"<->",a,b)
;

instantiate datatype Wff;

rewrite class Simplify (Wff)
{  GCRewriteCache<classof Wff> cache;
public:
   Simplify() {}
   int get_wff_state(Wff w) const   { return cache.get_state(w); }
   void set_wff_state(Wff w, int s) { cache.set_state(w,s); }
   void simplify(Wff& w)
   {  cache.initialize(4097);  // initialize cache and set cache size
      (*this)(w);              // rewrite w 
      cache.clear();           // clear the cache
   }
};

rewrite Simplify {
   index: Wff = extern wff;
      And(True,X):     X
   |  And(X,True):     X
   |  And(False,_):    False
   |  And(_,False):    False
   |  Or(True,_):      True
   |  Or(_,True):      True
   |  Or(False,X):     X
   |  Or(X,False):     X
   |  Not True:        False
   |  Not False:       True
   |  Not(Not X):      X
   |  Not(And(X,Y)):   Or(Not(X),Not(Y))
   |  Not(Or(X,Y)):    And(Not(X),Not(Y))
   |  And(And(X,Y),Z): And(X,And(Y,Z))
   |  Or(Or(X,Y),Z):   Or(X,Or(Y,Z))
   |  And(a,b) | a==b:  a
   |  Or(a,b)  | a==b:  a
   |  And(X as Var a,Var b) | a == b: X  
   |  Or(X as Var a,Var b) | a == b:  X   
   |  And(X as Var a,Y as Var b) | a > b: And(Y,X)
   |  Or(X as Var a,Y as Var b) | a > b: Or(Y,X)
   |  And(X as Var a,And(Y as Var b,Z)) | a > b: And(Y,And(X,Z))
   |  Or(X as Var a,Or(Y as Var b,Z)) | a > b: Or(Y,Or(X,Z))
   |  And(X as Var a,And(Y as Var b,Z)) | a == b: Or(X,Z)
   |  Or(X as Var a,Or(Y as Var b,Z)) | a == b: Or(X,Z)
   |  Xor(a,b):     Or(And(a,Not b),And(a,Not b))
   |  Equiv(a,b):   Or(And(a,b),And(Not a,Not b))
   |  Implies(a,b): Or(Not a, b)
};

int main()
{
   Simplify S;

   //
   //  Try a thousand times.
   //
   for (int i = 0; i < 1000; i++) 
   {  Wff wff = Var(#"y");
      for (int j = 0; j < 100; j++)
         wff = And(wff,Or(True,Not(Var(#"x"))));
      //cout << "Trial " << i << " input = " << wff << '\n';
      S.simplify(wff);
      cout << "Trial " << i << " output = " << wff << '\n';
      // if (i % 100 == 0) GC::garbage_collect();
   }

   GC::garbage_collect();
   return 0;
}
