#include <iostream>
#include "logic3.ph"

instantiate datatype Wff;


void simplify(Wff wff)
{
   std::cout << "input = " << wff << '\n';

   rewrite (wff) type (Wff) of
      And(True,X):     X
   |  And(X,True):     X
   |  And(False,_):    False
   |  And(_,False):    False
   |  Or(True,_):      True
   |  Or(_,True):      True
   |  Or(False,X):     X
   |  Or(X,False):     X
   |  Not True:        False
   |  Not False:       True
   |  Not(Not X):      X
   |  Not(And(X,Y)):   Or(Not(X),Not(Y))
   |  Not(Or(X,Y)):    And(Not(X),Not(Y))
   |  And(And(X,Y),Z): And(X,And(Y,Z))
   |  Or(Or(X,Y),Z):   Or(X,Or(Y,Z))
   |  And(a,b) | a==b:  a
   |  Or(a,b)  | a==b:  a
   |  And(X as Var a,Var b) | a == b: X  
   |  Or(X as Var a,Var b) | a == b:  X   
   |  And(X as Var a,Y as Var b) | a > b: And(Y,X)
   |  Or(X as Var a,Y as Var b) | a > b: Or(Y,X)
   |  And(X as Var a,And(Y as Var b,Z)) | a > b: And(Y,And(X,Z))
   |  Or(X as Var a,Or(Y as Var b,Z)) | a > b: Or(Y,Or(X,Z))
   |  And(X as Var a,And(Y as Var b,Z)) | a == b: Or(X,Z)
   |  Or(X as Var a,Or(Y as Var b,Z)) | a == b: Or(X,Z)
   |  Xor(a,b):     Or(And(a,Not b),And(a,Not b))
   |  Equiv(a,b):   Or(And(a,b),And(Not a,Not b))
   |  Implies(a,b): Or(Not a, b)
   end rewrite;

   std::cout << "output = " << wff << '\n';
}

int main()
{
   Wff e = And(True,Or(True,Not(Var(#"x"))));
   simplify(e);
   return 0;
}
