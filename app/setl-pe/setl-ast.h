///////////////////////////////////////////////////////////////////////////////
//  This file is generated automatically using Prop (version 2.3.2),
//  last updated on Mar 14, 1997.
//  The original source file is "setl-ast.ph".
///////////////////////////////////////////////////////////////////////////////

#define PROP_GARBAGE_COLLECTION_USED
#define PROP_PRINTER_USED
#include <propdefs.h>
#line 1 "setl-ast.ph"
#ifndef SETL_abstract_syntax_h
#define SETL_abstract_syntax_h

#include "foundation.h"

#line 6 "setl-ast.ph"
#line 51 "setl-ast.ph"
///////////////////////////////////////////////////////////////////////////////
//
// Forward class definition for Exp
//
///////////////////////////////////////////////////////////////////////////////
#ifndef datatype_Exp_defined
#define datatype_Exp_defined
   class a_Exp;
   typedef a_Exp * Exp;
#endif

enum Prim {
   XXclXX = 0, XXcnXX = 1, XXckXX = 2, 
   XXcpXX = 3, XXdkdnXX = 4, XXdnXX = 5, 
   XXdmXX = 6, XXdoXX = 7, XXdodnXX = 8, 
   XXdmdnXX = 9, XXcpdnXX = 10, XXcdXX = 11, 
   XX_a_r_bXX = 12, XX_d_i_vXX = 13, XX_m_o_dXX = 14, 
   XX_w_i_t_hXX = 15, XX_l_e_s_sXX = 16
};



///////////////////////////////////////////////////////////////////////////////
//
// Forward class definition for Decl
//
///////////////////////////////////////////////////////////////////////////////
#ifndef datatype_Decl_defined
#define datatype_Decl_defined
   class a_Decl;
   typedef a_Decl * Decl;
#endif

///////////////////////////////////////////////////////////////////////////////
//
// Forward class definition for Term
//
///////////////////////////////////////////////////////////////////////////////
#ifndef datatype_Term_defined
#define datatype_Term_defined
   class a_Term;
   typedef a_Term * Term;
#endif

///////////////////////////////////////////////////////////////////////////////
//
// Forward class definition for Ty
//
///////////////////////////////////////////////////////////////////////////////
#ifndef datatype_Ty_defined
#define datatype_Ty_defined
   class a_Ty;
   typedef a_Ty * Ty;
#endif

#  define NOty (Ty)0

///////////////////////////////////////////////////////////////////////////////
//
// Forward class definition for LabeledExp
//
///////////////////////////////////////////////////////////////////////////////
#ifndef datatype_LabeledExp_defined
#define datatype_LabeledExp_defined
   class a_LabeledExp;
   typedef a_LabeledExp * LabeledExp;
#endif

///////////////////////////////////////////////////////////////////////////////
//
// Forward class definition for Literal
//
///////////////////////////////////////////////////////////////////////////////
#ifndef datatype_Literal_defined
#define datatype_Literal_defined
   class a_Literal;
   typedef a_Literal * Literal;
#endif

///////////////////////////////////////////////////////////////////////////////
// Definition of type Ids
///////////////////////////////////////////////////////////////////////////////
#line 44 "setl-ast.ph"
typedef a_List<Id> *  Ids;

///////////////////////////////////////////////////////////////////////////////
// Definition of type Literals
///////////////////////////////////////////////////////////////////////////////
#line 45 "setl-ast.ph"
typedef a_List<Literal> *  Literals;

///////////////////////////////////////////////////////////////////////////////
// Definition of type Exps
///////////////////////////////////////////////////////////////////////////////
#line 46 "setl-ast.ph"
typedef a_List<Exp> *  Exps;

///////////////////////////////////////////////////////////////////////////////
// Definition of type LabeledExps
///////////////////////////////////////////////////////////////////////////////
#line 47 "setl-ast.ph"
typedef a_List<LabeledExp> *  LabeledExps;

///////////////////////////////////////////////////////////////////////////////
// Definition of type Decls
///////////////////////////////////////////////////////////////////////////////
#line 48 "setl-ast.ph"
typedef a_List<Decl> *  Decls;

///////////////////////////////////////////////////////////////////////////////
// Definition of type Terms
///////////////////////////////////////////////////////////////////////////////
#line 49 "setl-ast.ph"
typedef a_List<Term> *  Terms;

///////////////////////////////////////////////////////////////////////////////
// Definition of type Tys
///////////////////////////////////////////////////////////////////////////////
#line 50 "setl-ast.ph"
typedef a_List<Ty> *  Tys;

///////////////////////////////////////////////////////////////////////////////
//
// Base class for datatype Exp
//
///////////////////////////////////////////////////////////////////////////////
class a_Exp : public GCObject {
public:
   enum Tag_Exp {
      tag_IDexp = 0, tag_LITexp = 1, tag_APPexp = 2, 
      tag_TUPLEexp = 3, tag_RECORDexp = 4, tag_SETexp = 5, 
      tag_CASEexp = 6, tag_IFexp = 7, tag_WHILEexp = 8, 
      tag_SEQexp = 9, tag_LETexp = 10, tag_PRIMexp = 11
   };

public:
   const Tag_Exp tag__; // variant tag
protected:
   inline a_Exp(Tag_Exp t__) : tag__(t__) {}
public:
   virtual ~a_Exp();
   ////////////////////////////////////////////////////////////////////////////
   //
   // Method for garbage collection tracing
   //
   ////////////////////////////////////////////////////////////////////////////
protected:
   virtual void trace(GC *);
public:
};
inline int boxed(const a_Exp *) { return 1; }
inline int untag(const a_Exp * x) { return x->tag__; }
///////////////////////////////////////////////////////////////////////////////
//
// Class for datatype constructor Exp::IDexp
//
///////////////////////////////////////////////////////////////////////////////
class Exp_IDexp : public a_Exp {
public:
#line 6 "setl-ast.ph"
   Id IDexp; 
   Exp_IDexp (Id x_IDexp);
   ~Exp_IDexp();
   ////////////////////////////////////////////////////////////////////////////
   //
   // Method for garbage collection tracing
   //
   ////////////////////////////////////////////////////////////////////////////
protected:
   virtual void trace(GC *);
public:
};

///////////////////////////////////////////////////////////////////////////////
//
// Class for datatype constructor Exp::LITexp
//
///////////////////////////////////////////////////////////////////////////////
class Exp_LITexp : public a_Exp {
public:
#line 8 "setl-ast.ph"
   Literal LITexp; 
   Exp_LITexp (Literal x_LITexp);
   ~Exp_LITexp();
   ////////////////////////////////////////////////////////////////////////////
   //
   // Method for garbage collection tracing
   //
   ////////////////////////////////////////////////////////////////////////////
protected:
   virtual void trace(GC *);
public:
};

///////////////////////////////////////////////////////////////////////////////
//
// Class for datatype constructor Exp::APPexp
//
///////////////////////////////////////////////////////////////////////////////
class Exp_APPexp : public a_Exp {
public:
#line 9 "setl-ast.ph"
   Exp _1; Exp _2; 
   Exp_APPexp (Exp x_1, Exp x_2);
   ~Exp_APPexp();
   ////////////////////////////////////////////////////////////////////////////
   //
   // Method for garbage collection tracing
   //
   ////////////////////////////////////////////////////////////////////////////
protected:
   virtual void trace(GC *);
public:
};

///////////////////////////////////////////////////////////////////////////////
//
// Class for datatype constructor Exp::TUPLEexp
//
///////////////////////////////////////////////////////////////////////////////
class Exp_TUPLEexp : public a_Exp {
public:
#line 10 "setl-ast.ph"
   Exps TUPLEexp; 
   Exp_TUPLEexp (Exps x_TUPLEexp);
   ~Exp_TUPLEexp();
   ////////////////////////////////////////////////////////////////////////////
   //
   // Method for garbage collection tracing
   //
   ////////////////////////////////////////////////////////////////////////////
protected:
   virtual void trace(GC *);
public:
};

///////////////////////////////////////////////////////////////////////////////
//
// Class for datatype constructor Exp::RECORDexp
//
///////////////////////////////////////////////////////////////////////////////
class Exp_RECORDexp : public a_Exp {
public:
#line 11 "setl-ast.ph"
   LabeledExps RECORDexp; 
   Exp_RECORDexp (LabeledExps x_RECORDexp);
   ~Exp_RECORDexp();
   ////////////////////////////////////////////////////////////////////////////
   //
   // Method for garbage collection tracing
   //
   ////////////////////////////////////////////////////////////////////////////
protected:
   virtual void trace(GC *);
public:
};

///////////////////////////////////////////////////////////////////////////////
//
// Class for datatype constructor Exp::SETexp
//
///////////////////////////////////////////////////////////////////////////////
class Exp_SETexp : public a_Exp {
public:
#line 12 "setl-ast.ph"
   Exps SETexp; 
   Exp_SETexp (Exps x_SETexp);
   ~Exp_SETexp();
   ////////////////////////////////////////////////////////////////////////////
   //
   // Method for garbage collection tracing
   //
   ////////////////////////////////////////////////////////////////////////////
protected:
   virtual void trace(GC *);
public:
};

///////////////////////////////////////////////////////////////////////////////
//
// Class for datatype constructor Exp::CASEexp
//
///////////////////////////////////////////////////////////////////////////////
class Exp_CASEexp : public a_Exp {
public:
#line 13 "setl-ast.ph"
   Exp _1; Exps _2; 
   Exp_CASEexp (Exp x_1, Exps x_2);
   ~Exp_CASEexp();
   ////////////////////////////////////////////////////////////////////////////
   //
   // Method for garbage collection tracing
   //
   ////////////////////////////////////////////////////////////////////////////
protected:
   virtual void trace(GC *);
public:
};

///////////////////////////////////////////////////////////////////////////////
//
// Class for datatype constructor Exp::IFexp
//
///////////////////////////////////////////////////////////////////////////////
class Exp_IFexp : public a_Exp {
public:
#line 14 "setl-ast.ph"
   Exp _1; Exp _2; Exp _3; 
   Exp_IFexp (Exp x_1, Exp x_2, Exp x_3);
   ~Exp_IFexp();
   ////////////////////////////////////////////////////////////////////////////
   //
   // Method for garbage collection tracing
   //
   ////////////////////////////////////////////////////////////////////////////
protected:
   virtual void trace(GC *);
public:
};

///////////////////////////////////////////////////////////////////////////////
//
// Class for datatype constructor Exp::WHILEexp
//
///////////////////////////////////////////////////////////////////////////////
class Exp_WHILEexp : public a_Exp {
public:
#line 15 "setl-ast.ph"
   Exp _1; Exp _2; 
   Exp_WHILEexp (Exp x_1, Exp x_2);
   ~Exp_WHILEexp();
   ////////////////////////////////////////////////////////////////////////////
   //
   // Method for garbage collection tracing
   //
   ////////////////////////////////////////////////////////////////////////////
protected:
   virtual void trace(GC *);
public:
};

///////////////////////////////////////////////////////////////////////////////
//
// Class for datatype constructor Exp::SEQexp
//
///////////////////////////////////////////////////////////////////////////////
class Exp_SEQexp : public a_Exp {
public:
#line 16 "setl-ast.ph"
   Exps SEQexp; 
   Exp_SEQexp (Exps x_SEQexp);
   ~Exp_SEQexp();
   ////////////////////////////////////////////////////////////////////////////
   //
   // Method for garbage collection tracing
   //
   ////////////////////////////////////////////////////////////////////////////
protected:
   virtual void trace(GC *);
public:
};

///////////////////////////////////////////////////////////////////////////////
//
// Class for datatype constructor Exp::LETexp
//
///////////////////////////////////////////////////////////////////////////////
class Exp_LETexp : public a_Exp {
public:
#line 17 "setl-ast.ph"
   Decls _1; Exp _2; 
   Exp_LETexp (Decls x_1, Exp x_2);
   ~Exp_LETexp();
   ////////////////////////////////////////////////////////////////////////////
   //
   // Method for garbage collection tracing
   //
   ////////////////////////////////////////////////////////////////////////////
protected:
   virtual void trace(GC *);
public:
};

///////////////////////////////////////////////////////////////////////////////
//
// Class for datatype constructor Exp::PRIMexp
//
///////////////////////////////////////////////////////////////////////////////
class Exp_PRIMexp : public a_Exp {
public:
#line 18 "setl-ast.ph"
   Prim PRIMexp; 
   Exp_PRIMexp (Prim x_PRIMexp);
   ~Exp_PRIMexp();
   ////////////////////////////////////////////////////////////////////////////
   //
   // Method for garbage collection tracing
   //
   ////////////////////////////////////////////////////////////////////////////
protected:
   virtual void trace(GC *);
public:
};

///////////////////////////////////////////////////////////////////////////////
//
// Datatype constructor functions for Exp
//
///////////////////////////////////////////////////////////////////////////////
extern a_Exp * IDexp (Id x_IDexp);
extern a_Exp * LITexp (Literal x_LITexp);
extern a_Exp * APPexp (Exp x_1, Exp x_2);
extern a_Exp * TUPLEexp (Exps x_TUPLEexp);
extern a_Exp * RECORDexp (LabeledExps x_RECORDexp);
extern a_Exp * SETexp (Exps x_SETexp);
extern a_Exp * CASEexp (Exp x_1, Exps x_2);
extern a_Exp * IFexp (Exp x_1, Exp x_2, Exp x_3);
extern a_Exp * WHILEexp (Exp x_1, Exp x_2);
extern a_Exp * SEQexp (Exps x_SEQexp);
extern a_Exp * LETexp (Decls x_1, Exp x_2);
extern a_Exp * PRIMexp (Prim x_PRIMexp);


///////////////////////////////////////////////////////////////////////////////
//
//  Pretty printing methods for Prim
//
///////////////////////////////////////////////////////////////////////////////
class PrettyOStream;
extern ostream& operator<<(ostream&, Prim);
extern PrettyOStream& operator<<(PrettyOStream&, Prim);
///////////////////////////////////////////////////////////////////////////////
//
// Base class for datatype Decl
//
///////////////////////////////////////////////////////////////////////////////
class a_Decl : public GCObject {
public:
   enum Tag_Decl {
      tag_TYPEdecl = 0, tag_DATATYPEdecl = 1
   };

public:
   virtual ~a_Decl();
   ////////////////////////////////////////////////////////////////////////////
   //
   // Method for garbage collection tracing
   //
   ////////////////////////////////////////////////////////////////////////////
protected:
   virtual void trace(GC *);
public:
};
inline int boxed(const a_Decl *) { return 1; }
///////////////////////////////////////////////////////////////////////////////
//
// Embbeded tag extraction functions
//
///////////////////////////////////////////////////////////////////////////////
inline int untagp(const a_Decl * x)
   { return (unsigned long)x & 3; }
inline a_Decl * derefp(const a_Decl * x)
   { return (a_Decl*)((unsigned long)x & ~3); }
inline int untag(const a_Decl * x) { return untagp(x); }
///////////////////////////////////////////////////////////////////////////////
//
// Class for datatype constructor Decl::TYPEdecl
//
///////////////////////////////////////////////////////////////////////////////
class Decl_TYPEdecl : public a_Decl {
public:
#line 26 "setl-ast.ph"
   Id _1; Ids _2; Ty _3; 
   Decl_TYPEdecl (Id x_1, Ids x_2, Ty x_3);
   ~Decl_TYPEdecl();
   ////////////////////////////////////////////////////////////////////////////
   //
   // Method for garbage collection tracing
   //
   ////////////////////////////////////////////////////////////////////////////
protected:
   virtual void trace(GC *);
public:
};

///////////////////////////////////////////////////////////////////////////////
//
// Class for datatype constructor Decl::DATATYPEdecl
//
///////////////////////////////////////////////////////////////////////////////
class Decl_DATATYPEdecl : public a_Decl {
public:
#line 28 "setl-ast.ph"
   Id _1; Ids _2; Terms _3; 
   Decl_DATATYPEdecl (Id x_1, Ids x_2, Terms x_3);
   ~Decl_DATATYPEdecl();
   ////////////////////////////////////////////////////////////////////////////
   //
   // Method for garbage collection tracing
   //
   ////////////////////////////////////////////////////////////////////////////
protected:
   virtual void trace(GC *);
public:
};

///////////////////////////////////////////////////////////////////////////////
//
// Datatype constructor functions for Decl
//
///////////////////////////////////////////////////////////////////////////////
extern a_Decl * TYPEdecl (Id x_1, Ids x_2, Ty x_3);
extern a_Decl * DATATYPEdecl (Id x_1, Ids x_2, Terms x_3);

///////////////////////////////////////////////////////////////////////////////
//
// Class for datatype constructor Term::TERM
//
///////////////////////////////////////////////////////////////////////////////
class a_Term : public GCObject {
public:
#line 30 "setl-ast.ph"
   Id _1; Ty _2; 
   a_Term (Id x_1, Ty x_2);
   virtual ~a_Term();
   ////////////////////////////////////////////////////////////////////////////
   //
   // Method for garbage collection tracing
   //
   ////////////////////////////////////////////////////////////////////////////
protected:
   virtual void trace(GC *);
public:
};
inline int boxed(const a_Term *) { return 1; }
inline int untag(const a_Term *) { return 0; }
///////////////////////////////////////////////////////////////////////////////
//
// Datatype constructor functions for Term
//
///////////////////////////////////////////////////////////////////////////////
extern a_Term * TERM (Id x_1, Ty x_2);

///////////////////////////////////////////////////////////////////////////////
//
// Class for datatype constructor Ty::VARty
//
///////////////////////////////////////////////////////////////////////////////
class a_Ty : public GCObject {
public:
#line 34 "setl-ast.ph"
   Ty VARty; 
   a_Ty (Ty x_VARty);
   virtual ~a_Ty();
   ////////////////////////////////////////////////////////////////////////////
   //
   // Method for garbage collection tracing
   //
   ////////////////////////////////////////////////////////////////////////////
protected:
   virtual void trace(GC *);
public:
};
inline int boxed(const a_Ty * x) { return x != 0; }
inline int untag(const a_Ty * x) { return x ? 1 : 0; }
///////////////////////////////////////////////////////////////////////////////
//
// Datatype constructor functions for Ty
//
///////////////////////////////////////////////////////////////////////////////
extern a_Ty * VARty (Ty x_VARty);

///////////////////////////////////////////////////////////////////////////////
//
// Class for datatype constructor LabeledExp::LABELEDexp
//
///////////////////////////////////////////////////////////////////////////////
class a_LabeledExp : public GCObject {
public:
#line 36 "setl-ast.ph"
   Id id; Exp exp; 
   a_LabeledExp (Id x_id, Exp x_exp);
   virtual ~a_LabeledExp();
   ////////////////////////////////////////////////////////////////////////////
   //
   // Method for garbage collection tracing
   //
   ////////////////////////////////////////////////////////////////////////////
protected:
   virtual void trace(GC *);
public:
};
inline int boxed(const a_LabeledExp *) { return 1; }
inline int untag(const a_LabeledExp *) { return 0; }
///////////////////////////////////////////////////////////////////////////////
//
// Datatype constructor functions for LabeledExp
//
///////////////////////////////////////////////////////////////////////////////
extern a_LabeledExp * LABELEDexp (Id x_id, Exp x_exp);

///////////////////////////////////////////////////////////////////////////////
//
// Base class for datatype Literal
//
///////////////////////////////////////////////////////////////////////////////
class a_Literal : public GCObject {
public:
   enum Tag_Literal {
      tag_INTlit = 0, tag_REALlit = 1, tag_STRINGlit = 2, 
      tag_CHARlit = 3
   };

public:
   virtual ~a_Literal();
   ////////////////////////////////////////////////////////////////////////////
   //
   // Method for garbage collection tracing
   //
   ////////////////////////////////////////////////////////////////////////////
protected:
   virtual void trace(GC *);
public:
};
inline int boxed(const a_Literal *) { return 1; }
///////////////////////////////////////////////////////////////////////////////
//
// Embbeded tag extraction functions
//
///////////////////////////////////////////////////////////////////////////////
inline int untagp(const a_Literal * x)
   { return (unsigned long)x & 3; }
inline a_Literal * derefp(const a_Literal * x)
   { return (a_Literal*)((unsigned long)x & ~3); }
inline int untag(const a_Literal * x) { return untagp(x); }
///////////////////////////////////////////////////////////////////////////////
//
// Class for datatype constructor Literal::INTlit
//
///////////////////////////////////////////////////////////////////////////////
class Literal_INTlit : public a_Literal {
public:
#line 38 "setl-ast.ph"
   int INTlit; 
   Literal_INTlit (int x_INTlit);
   ~Literal_INTlit();
   ////////////////////////////////////////////////////////////////////////////
   //
   // Method for garbage collection tracing
   //
   ////////////////////////////////////////////////////////////////////////////
protected:
   virtual void trace(GC *);
public:
};

///////////////////////////////////////////////////////////////////////////////
//
// Class for datatype constructor Literal::REALlit
//
///////////////////////////////////////////////////////////////////////////////
class Literal_REALlit : public a_Literal {
public:
#line 40 "setl-ast.ph"
   double REALlit; 
   Literal_REALlit (double x_REALlit);
   ~Literal_REALlit();
   ////////////////////////////////////////////////////////////////////////////
   //
   // Method for garbage collection tracing
   //
   ////////////////////////////////////////////////////////////////////////////
protected:
   virtual void trace(GC *);
public:
};

///////////////////////////////////////////////////////////////////////////////
//
// Class for datatype constructor Literal::STRINGlit
//
///////////////////////////////////////////////////////////////////////////////
class Literal_STRINGlit : public a_Literal {
public:
#line 41 "setl-ast.ph"
   char const * STRINGlit; 
   Literal_STRINGlit (char const * x_STRINGlit);
   ~Literal_STRINGlit();
   ////////////////////////////////////////////////////////////////////////////
   //
   // Method for garbage collection tracing
   //
   ////////////////////////////////////////////////////////////////////////////
protected:
   virtual void trace(GC *);
public:
};

///////////////////////////////////////////////////////////////////////////////
//
// Class for datatype constructor Literal::CHARlit
//
///////////////////////////////////////////////////////////////////////////////
class Literal_CHARlit : public a_Literal {
public:
#line 42 "setl-ast.ph"
   char CHARlit; 
   Literal_CHARlit (char x_CHARlit);
   ~Literal_CHARlit();
   ////////////////////////////////////////////////////////////////////////////
   //
   // Method for garbage collection tracing
   //
   ////////////////////////////////////////////////////////////////////////////
protected:
   virtual void trace(GC *);
public:
};

///////////////////////////////////////////////////////////////////////////////
//
// Datatype constructor functions for Literal
//
///////////////////////////////////////////////////////////////////////////////
extern a_Literal * INTlit (int x_INTlit);
extern a_Literal * REALlit (double x_REALlit);
extern a_Literal * STRINGlit (char const * x_STRINGlit);
extern a_Literal * CHARlit (char x_CHARlit);

#line 51 "setl-ast.ph"
#line 51 "setl-ast.ph"


#endif
#line 54 "setl-ast.ph"
/*
------------------------------- Statistics -------------------------------
Merge matching rules         = yes
Number of DFA nodes merged   = 0
Number of ifs generated      = 0
Number of switches generated = 0
Number of labels             = 0
Number of gotos              = 0
Adaptive matching            = enabled
Fast string matching         = enabled
Inline downcasts             = enabled
--------------------------------------------------------------------------
*/
