///////////////////////////////////////////////////////////////////////////////
//  This file is generated automatically using Prop (version 2.3.5),
//  last updated on Jun 18, 1997.
//  The original source file is "parser.ph".
///////////////////////////////////////////////////////////////////////////////

#define PROP_REWRITING_USED
#define PROP_STRCMP_USED
#define PROP_PARSER_USED
#define PROP_QUARK_USED
#include <propdefs.h>
#line 1 "parser.ph"
#ifndef parser_h
#define parser_h

#include <AD/automata/iolexerbuf.h>
#include "willard-ast.h"

//
//  This is the interface of the relation calculus parser.
//
#line 10 "parser.ph"
#line 20 "parser.ph"
class QueryParser : public LR1Parser {
public:
   ////////////////////////////////////////////////////////////////////////////
   // Parser table type definitions
   ////////////////////////////////////////////////////////////////////////////
   typedef LR1Parser               Super;
   typedef Super::Offset           Offset;
   typedef Super::State            State;
   typedef Super::Rule             Rule;
   typedef Super::Symbol           Symbol;
   typedef Super::ProductionLength ProductionLength;
   typedef Super::ShortSymbol      ShortSymbol;
   typedef Super::EquivMap         EquivMap;
   enum { INITIAL_STACK_SIZE_ = 256,
          MAX_STACK_SIZE_     = 8192
        };
protected:
   ////////////////////////////////////////////////////////////////////////////
   // Semantic value stack
   ////////////////////////////////////////////////////////////////////////////
   union QueryParser_semantic_stack_type * t__, * bot__;
   int stack_size__;
   int heap_allocated__;
public:
   ////////////////////////////////////////////////////////////////////////////
   // Constructor and parsing method
   ////////////////////////////////////////////////////////////////////////////
   QueryParser();
   virtual void parse();
   void action_driver(const Rule);
private:
   void adjust_stack(int);
   void grow_semantic_stack();
#line 11 "parser.ph"
 QueryParser(const QueryParser&);
   int   line_no;
   Exp   query;
   
   ErrorAction error_report(const char * message); // error reporting
   public:
   IOLexerBuffer lexbuf;  // a lexer stream buffer
   int get_token();       // method generated by Prop
   Exp read();            // method to a read a query
#line 20 "parser.ph"
};
#line 20 "parser.ph"
#line 20 "parser.ph"


#endif
#line 23 "parser.ph"
/*
------------------------------- Statistics -------------------------------
Merge matching rules         = yes
Number of DFA nodes merged   = 0
Number of ifs generated      = 0
Number of switches generated = 0
Number of labels             = 0
Number of gotos              = 0
Adaptive matching            = disabled
Fast string matching         = disabled
Inline downcasts             = disabled
--------------------------------------------------------------------------
*/
