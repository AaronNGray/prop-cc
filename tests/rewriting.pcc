//////////////////////////////////////////////////////////////////////////////
//  Testing the rewriting features.
//////////////////////////////////////////////////////////////////////////////
#include <new.h>
#include <iostream.h>

int balance;     // number of allocation - number of deallocation
int div_by_zero; // number of division by zeros

//////////////////////////////////////////////////////////////////////////////
// We'll use reference counting with rewriting.
// The operators new and delete are redefined to keep track of   
// the number of allocations and deallocation.
// This is for demonstration use only.  In practice, it is
// unnecessary to redefine these operators if the normal ones
// suffice.
//////////////////////////////////////////////////////////////////////////////
class MEM {
public:
   inline void * operator new (size_t n) 
      { balance++; return new char [n]; }
   inline void   operator delete (void * x)
      { balance--; delete [] ((char*)x); }
};

//////////////////////////////////////////////////////////////////////////////
//  Define the datatypes EXP and EXP_LIST.  Currently, rewriting can only be 
//  performed on datatypes(and not views) in Prop.  If replacement is 
//  to be performed on a datatype, then it should be declared using 
//  the ``rewrite'' qualifier.
//
//  We'll extend these datatypes from class MEM so that it'll inherit
//  MEM's operator new and delete.
//////////////////////////////////////////////////////////////////////////////
datatype EXP : MEM :: traced rewrite = om 
                                     | num (int)
                                     | var (char)
                                     | add (EXP, EXP)
                                     | sub (EXP, EXP)
                                     | mul (EXP, EXP)
                                     | div (EXP, EXP)
                                     | exp_list (EXP_LIST)
//////////////////////////////////////////////////////////////////////////////
//  A list of expressions.
//////////////////////////////////////////////////////////////////////////////
and EXP_LIST : MEM :: traced rewrite = #[] 
                                     | #[ EXP ... EXP_LIST ]
                                     ;

//////////////////////////////////////////////////////////////////////////////
//  Define a method that prints an expression.  This is a simple
//  inductive definition
//////////////////////////////////////////////////////////////////////////////
ostream& operator << (ostream& f, EXP_LIST l);
ostream& operator << (ostream& f, EXP e)
{  match (e) {
      om:          { return f << "om"; }
   |  num i:       { return f << i; }
   |  var v:       { return f << v; }
   |  add(a,b):    { return f << '(' << a << " + " << b << ')'; }
   |  sub(a,b):    { return f << '(' << a << " - " << b << ')'; }
   |  mul(a,b):    { return f << '(' << a << " * " << b << ')'; }
   |  div(a,b):    { return f << '(' << a << " / " << b << ')'; }
   |  exp_list(l): { return f << '[' << l << ']'; }
   }
}

//////////////////////////////////////////////////////////////////////////////
//  This prints an expression list
//////////////////////////////////////////////////////////////////////////////
ostream& operator << (ostream& f, EXP_LIST l)
{  match (l) {
      #[]:        { return f; }
   |  #[l]:       { return f << l; }
   |  #[h ... t]: { return f << h << ", " << t; }
   }
}

//////////////////////////////////////////////////////////////////////////////
//  Define the interface to a ``rewriting class.''  A rewriting class 
//  is simply a C++ class with rewriting rules attached.  In real programs
//  this definition should be placed in some definition (i.e. .ph) files.
//  
//  In parenthesis, we must list all datatypes involved.   Unlike
//  simple pattern matching, rewriting can involve a set of mutually
//  recursive (or mutually exclusive, if desired) datatype definitions.
//  So in general this is a comma delimited list.   
//
//  In this example it involves only the datatypes EXP and EXP_LIST.
//////////////////////////////////////////////////////////////////////////////
rewrite class Simplify (EXP, EXP_LIST)
{  // nothing here for now.
public:
   Simplify() {}
};

//////////////////////////////////////////////////////////////////////////////
//  Now we define the rewriting rules in the rewriting class Simplify.  These
//  rules should be placed in an implementation file (.pcc, .pC, .pc++ etc).
//
//  In this brief sample class we have some rules that perform 
//  simple constant folding and strength reduction.
//
//  Currently, all the rules for a rewrite class must be placed in
//  the same rewrite construct.  This will probably change in the future
//  once I work out the details on incremental tree automata compilation.
//////////////////////////////////////////////////////////////////////////////
rewrite Simplify {
   add (num 0, x):                    rewrite(x); 
|  add (x, num 0):                    rewrite(x);  
|  sub (x, num 0):                    rewrite(x);  
|  mul (x, num 0):                    rewrite(num(0));  
|  mul (num 0, x):                    rewrite(num(0));  
|  mul (x, num 1):                    rewrite(x);       
|  mul (num 1, x):                    rewrite(x); 
|  mul (x, num 2):                    rewrite(add(x,x)); 
|  mul (num 2, x):                    rewrite(add(x,x)); 
|  div (x, num 1):                    rewrite(x);        
|  add (num x, num y):                rewrite(num(x + y)); 
|  sub (num x, num y):                rewrite(num(x - y)); 
|  mul (num x, num y):                rewrite(num(x * y)); 
|  div (num x, num y) where (y != 0): rewrite(num(x / y)); 
|  div (_, num 0):                    {  cout << "Division by zero!\n"; 
                                         div_by_zero++; 
                                      }
|  div (zero as num 0, x):            rewrite(zero); 
|  #[ _ ... _ ]:                      { cout << "list found\n"; }
|  #[]:                               { cout << "nil found\n"; }
};

//////////////////////////////////////////////////////////////////////////////
//  Instantiate the datatypes
//////////////////////////////////////////////////////////////////////////////
instantiate datatype EXP, EXP_LIST;

//////////////////////////////////////////////////////////////////////////////
//  Now defines the main program that uses all this stuff.
//////////////////////////////////////////////////////////////////////////////
int main()
{
   //
   // Instantiate a rewriting class 
   //
   Simplify sim;

   //
   // (0 + x * 2) / (1 * 5 + 1 * 3) / (0 / y);
   //
   EXP t1 = div(div(add(num(0), mul(var('x'),num(2))), 
                    add(mul(num(1), num(5)),mul(num(1),num(3)))),
                div(num(0),var('y')));
   EXP term = mul(t1,t1);

   //
   //  Rewrite the big term above.
   // 
   cout << "Before: " << term << '\n';
   sim(term);
   cout << "After: " << term << '\n';

   //
   //  Rewrite it again.  It should have no effect since the term
   //  is already in normal form.
   //
   sim(term);
   cout << "Again (should have no effect): " << term << '\n';

   //
   //  Rewrite some other term.
   //
   EXP term2 = add(sub(num(3),num(3)), var('z'));
   cout << "Before: " << term2 << '\n';
   sim(term2);
   cout << "After: " << term2 << '\n';

   //
   //  Rewrite some other term.
   //
   EXP term3 = div(num(1),num(0));
   sim(term3);

   //
   //  Rewrite some other term.
   //  Notice that even though the patterns do not involve `exp_list'
   //  directly the internal components of `exp_list' are still candidates
   //  for rewrites: rewriting operates on the entire tree, and not just
   //  on the cover like vanilla pattern matching.
   //
   EXP term4 = exp_list(#[div(num(1),num(0)), var('x')]);
   sim(term4);

   //
   //
   //  Set the terms to 'om' so that their storage is released.
   //
   t1 = term = term2 = term3 = term4 = om;
   if (div_by_zero != 6) { cerr << "BUG in rewriting!\n"; return 1; }
   if (balance != 0)     { cerr << "BUG in reference counting!\n"; return 1; }
   return 0;
}
