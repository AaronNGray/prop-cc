/////////////////////////////////////////////////////////////////////////////
//
//  The qualifier `printable' for a datatype automatic generates a printing
//  method suitable for debugging use.
//
/////////////////////////////////////////////////////////////////////////////

#include <iostream.h>

/////////////////////////////////////////////////////////////////////////////
//
//  Defines a simple datatype to represent expressions.
//  Also specify the pretty printing formats.
//
/////////////////////////////////////////////////////////////////////////////
datatype EXP = num (int)           => _
             | var (const char *)  => _
             | add (EXP, EXP)      => "(" _ " + " _ ")"
             | sub (EXP, EXP)      => "(" _ " - " _ ")"
             | mul (EXP, EXP)      => "(" _ " * " _ ")"
             | div (EXP, EXP)      => "(" _ " / " _ ")"
             ;

/////////////////////////////////////////////////////////////////////////////
//
//  Instantiate the datatype
//
/////////////////////////////////////////////////////////////////////////////
instantiate datatype EXP;

/////////////////////////////////////////////////////////////////////////////
//
//  Now test out the printer
//
/////////////////////////////////////////////////////////////////////////////
int main()
{
   EXP a = var ("a");
   EXP b = var ("b");
   EXP c = var ("c");

   //  a * a + b * b + c * c - 1
   EXP e1 = sub(add(mul(a,a), add(mul(b,b), mul(c,c))),num(1));

   cout << e1 << '\n'; 

   return 0;
}
