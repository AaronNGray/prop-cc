#include <AD/persist/pstream.h>
#include <AD/memory/strpool.h>
#include <fstream.h>

datatype Exp :: collectable persistent =
    NOexp                  => "<none>" 
  | IDexp  (Id)            => _
  | LITexp (Literal)       => _
  | ADDexp (Exp, Exp)      => "(" _ "+" _ ")"
  | SUBexp (Exp, Exp)      => "(" _ "-" _ ")"
  | MULexp (Exp, Exp)      => "(" _ "*" _ ")"
  | DIVexp (Exp, Exp)      => "(" _ "/" _ ")"
  | IFexp  (Exp, Exp, Exp) => "if" _ "then" { _ } "else" { _ } "endif"

and Literal :: collectable persistent
  = NOlit                    => "<???>"
  | INTlit (int)             => _
  | REALlit (double)         => _
  | STRINGlit (const char *) => "\"" _ "\""

where type Id = const char *
  ;

refine persistent Exp      => "Expressions"
                | Literal  => "Literals"
  ;
   

instantiate datatype Exp, Literal;

const char * data_file = "persist2.dat";

int main()
{  GC::get_default_gc().set_initial_heap_size(1024*1024);
   for (int i = 0; i < 5000; i++) {
      StringPool pool;
      Exp e0 = ADDexp(IDexp("x"),LITexp(INTlit(1)));
      Exp e1 = MULexp(e0,SUBexp(e0,IDexp("y")));
      e1 = IFexp(e1,e1,e1);
      e1 = DIVexp(LITexp(STRINGlit("Hello world")),e1);
      cout << '.' << flush;
      if (i % 1000 == 0) cout << ": e1 = " << e1 << '\n';
      {  ofstream F(data_file);
         Postream P(F);   
         if (i % 1000 == 0) 
            cout << "[Writing object to file '" << data_file << "']\n";
         P << e1;
         P << e1;
         F.close();
      }
      // Generate garbage
      {  Exp e0 = ADDexp(IDexp("x"),LITexp(INTlit(1)));
         Exp e1 = MULexp(e0,SUBexp(e0,IDexp("y")));
         e1 = IFexp(e1,e1,e1);
         e1 = DIVexp(LITexp(STRINGlit("Hello world")),e1);
      }
      Exp e2 = NOexp;
      Exp e3 = NOexp;
      {  ifstream F(data_file);
         Pistream P(F,pool);     // (F,GC::get_default_gc());
         if (i % 1000 == 0) 
            cout << "[Reading object to file '" << data_file << "']\n";
         e2 = (Exp)read_object(P);
         e3 = (Exp)read_object(P);
         F.close();
      } 
      if (i % 1000 == 0)
      {  cout << "e2 = " << e2 << " aka " << (void*)e2 << '\n';
         cout << "e3 = " << e3 << " aka " << (void*)e3 << '\n';
      }
   }
   cout << "\nOkay\n";
   return 0;
}
