///////////////////////////////////////////////////////////////////////////////
//
//  Test garbage collection by merge sorting a list in reverse sorted
//  order.
//
///////////////////////////////////////////////////////////////////////////////

#include <iostream.h>
#include <AD/gc/gc.h>

//  A collectable integer list

datatype List :: collectable = #[] | #[ int ... List ];

//  Instantiate the list datatype

instantiate datatype List;

//  Pretty print a list

ostream& operator << (ostream& f, List l)
{  match (l)
   {  #[]:             { return f; }
   |  #[one]:          { return f << one; }
   |  #[one ... rest]: { return f << one << ", " << rest; }
   }
}

extern List merge (List, List);
extern List sort  (List);

List merge (List a, List b)
{  match (a) and (b)
   {  #[],        b:                   { return b; }
   |  a,          #[]:                 { return a; }
   |  #[u ... v], #[w ... x] | u <= w: { return #[u ... merge(v,b)]; }
   |  #[u ... v], #[w ... x]:          { return #[w ... merge(a,x)]; }
   }
}

//  Sort a list

List sort (List l)
{  match (l)
   {  #[] || #[_]: { return l; }
   |  _:           { List a = #[];
                     List b = #[];
                     match while (l)
                     {  #[x, y ... t]:  { a = #[x...a]; b = #[y...b]; l = t; }
                     |  #[x]:           { a = #[x...a]; l = #[]; }
                     }
                     return merge(sort(a), sort(b));
                   }
   }
}

//  Create a list from hi to lo in descending order

List range (int hi, int lo)
{  return hi < lo ? #[] : #[hi ... range(hi-1,lo)]; }

//  Sorting the list #[10000, 9999, 9998 ... 1] 
//  Use 1 megabyte for heap space.

int main()
{  GC::get_default_gc().set_initial_heap_size(1024*1024);
   List l = range(10000,1);
   cout << sort(l) << '\n';
   GC::get_default_gc().print_statistics(cout);
   return 0;
}
