//////////////////////////////////////////////////////////////////////////////
// NOTICE:
//
// ADLib, Prop and their related set of tools and documentation are in the
// public domain.   The author(s) of this software reserve no copyrights on
// the source code and any code generated using the tools.  You are encouraged
// to use ADLib and Prop to develop software, in both academic and commercial
// settings, and are free to incorporate any part of ADLib and Prop into
// your programs.
//
// Although you are under no obligation to do so, we strongly recommend that
// you give away all software developed using our tools.
//
// We also ask that credit be given to us when ADLib and/or Prop are used in
// your programs, and that this notice be preserved intact in all the source
// code.
//
// This software is still under development and we welcome any suggestions
// and help from the users.
//
// Allen Leung
// 1994
//////////////////////////////////////////////////////////////////////////////

#ifndef LL1_parser_h
#define LL1_parser_h

//
// Class |LL1| represents a parser generated by a LL(1) grammar.
// The algorithm used is the one described in \cite{FL-1988}.
//

#include <AD/automata/grammar.h>  // Canonical parser grammar
#include <AD/automata/compdfa.h>  // Compressed sparse dfa

class LL1
{
  LL1( const LL1&);                // no copy constructor
  void operator = ( const LL1&);   // no assignment

protected:

  typedef Grammar::NonTerminal  NonTerminal;
  typedef Grammar::Terminal     Terminal;
  typedef Grammar::Action       Action;
  typedef Grammar::Production   Production;
  typedef CompressedDFA::State  State;
  typedef CompressedDFA::Offset Offset;

  const Offset * base;
  const State  * next;
  const Grammar grammar;

public:

  LL1()
  {}

  LL1(
       const Offset   base_table [],
       const State    next_table [],
       const Grammar& G
     ) : base(base_table), next(next_table), grammar(G)
  {}

  ~LL1()
  {}
}
;

#endif
