//////////////////////////////////////////////////////////////////////////////
// NOTICE:
//
// ADLib, Prop and their related set of tools and documentation are in the
// public domain.   The author(s) of this software reserve no copyrights on
// the source code and any code generated using the tools.  You are encouraged
// to use ADLib and Prop to develop software, in both academic and commercial
// settings, and are welcomed to incorporate any part of ADLib and Prop into
// your programs.
//
// Although you are under no obligation to do so, we strongly recommend that
// you give away all software developed using our tools.
//
// We also ask that credit be given to us when ADLib and/or Prop are used in
// your programs, and that this notice be preserved intact in all the source
// code.
//
// This software is still under development and we welcome(read crave for)
// any suggestions and help from the users.
//
// Allen Leung
// 1994
//////////////////////////////////////////////////////////////////////////////

#ifndef objective_c_h
#define objective_c_h

#include <stdarg.h>
#include <AD/generic/generic.h>
#include <AD/generic/ordering.h>

//////////////////////////////////////////////////////////////////////////////
//  This file describes some definitions used in the runtime system
//  of an Objective-c like sublanguage.
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//  Forward declarations for some important classes.
//////////////////////////////////////////////////////////////////////////////

class O_Class;            //  Base class of a class object
class O_Object;           //  Base class for an object

//////////////////////////////////////////////////////////////////////////////
//  A handle to an object is defined to be of type OID.
//  (This differs from Objective-C which uses the type `id'.
//   I think the identifier `id' is too common to be used this way and
//   thus this change.)
//////////////////////////////////////////////////////////////////////////////

typedef O_Object * OID;

//////////////////////////////////////////////////////////////////////////////
//  A message selector is implemented as an unsigned integer internally.
//////////////////////////////////////////////////////////////////////////////

class O_Selector
{
  unsigned int sel;
  friend class O_Selector_Table;
  inline O_Selector(unsigned int s) : sel(s) {}

  ///////////////////////////////////////////////////////////////////////////
  //  Constructor and destructor
  ///////////////////////////////////////////////////////////////////////////

public:
  inline O_Selector() : sel(0) {}
  inline O_Selector(const O_Selector& s) : sel(s) {}
  O_Selector(const char *);

  ///////////////////////////////////////////////////////////////////////////
  //  Assignments
  ///////////////////////////////////////////////////////////////////////////

  inline O_Selector& operator = (const O_Selector& s)
  {
    sel = s.sel;
    return *this;
  }
  O_Selector& operator = (const char *);

  ///////////////////////////////////////////////////////////////////////////
  //  Conversion
  ///////////////////////////////////////////////////////////////////////////

  inline operator unsigned int() const
  {
    return sel;
  }
  const char * name    () const;

  ///////////////////////////////////////////////////////////////////////////
  //  Hashing and equality
  ///////////////////////////////////////////////////////////////////////////

  inline friend unsigned int hash(O_Selector s)
  {
    return s.sel;
  }

  inline friend Bool equal(O_Selector a, O_Selector b)
  {
    return a.sel == b.sel;
  }
};

//////////////////////////////////////////////////////////////////////////////
//  Definition of class Object.
//  We require that all objects with dynamic message dispatching to
//  be derived from this base class.
//////////////////////////////////////////////////////////////////////////////

class O_Object
{
protected:
  O_Class * isa;  //  class descriptor of object

  ///////////////////////////////////////////////////////////////////////////
  //  Method selectors
  ///////////////////////////////////////////////////////////////////////////

public:
  typedef O_Selector O_SEL;

  ///////////////////////////////////////////////////////////////////////////
  //  Definition of a O_Object method.
  ///////////////////////////////////////////////////////////////////////////
  typedef OID (O_Object::*ObjectMethod)(O_SEL, va_list);

public:

  ///////////////////////////////////////////////////////////////////////////
  //  Constructor and destructor for object.
  ///////////////////////////////////////////////////////////////////////////
  O_Object();
  O_Object(O_Class *);
  virtual ~O_Object();

  ///////////////////////////////////////////////////////////////////////////
  //  Attributes
  ///////////////////////////////////////////////////////////////////////////
  inline const O_Class * my_class() const
  {
    return isa;
  }
  inline       O_Class * my_class()
  {
    return isa;
  }

  ///////////////////////////////////////////////////////////////////////////
  //  Message dispatching.
  //  We define a default message lookup mechanism in this class.
  //  Subclasses are free to override this mechanism.
  ///////////////////////////////////////////////////////////////////////////
  virtual OID send(O_SEL, ...);
  virtual OID send(const char *, ...);
  virtual OID message_not_understood (O_SEL, va_list);

  ///////////////////////////////////////////////////////////////////////////
  //  Dereferencing
  ///////////////////////////////////////////////////////////////////////////
  inline  const O_Object * operator -> () const
  {
    return this;
  }
  inline        O_Object * operator -> ()
  {
    return this;
  }
};

#endif
