///////////////////////////////////////////////////////////////////////////////
//
//  Environment
//
///////////////////////////////////////////////////////////////////////////////

#include "env.h"

///////////////////////////////////////////////////////////////////////////////
//
//  Constructor and destructor
//
///////////////////////////////////////////////////////////////////////////////

Env::Env() : env( string_hash, string_equal) {}

Env::Env(const Env& E) : env( string_hash, string_equal)
{
  foreach_entry( i, E.env)
    env.insert(i->k,i->v);
}

Env::~Env() {}

///////////////////////////////////////////////////////////////////////////////
//
//  Type lookup
//
///////////////////////////////////////////////////////////////////////////////

Ty Env::operator () (Id id) const
{
  HashTable::Entry * e = env.lookup(id);
  if (e)
    return (Ty)(e->v);
  else
    return NOty;
}

///////////////////////////////////////////////////////////////////////////////
//
//  Insert a new entry to the environment
//
///////////////////////////////////////////////////////////////////////////////
void Env::bind( Id id, Ty ty)
{
  env.insert( id, ty);
}
