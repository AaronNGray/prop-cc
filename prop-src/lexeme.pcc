///////////////////////////////////////////////////////////////////////////////
//
//  This file implements some support routines for lexeme and regular
//  expressions handling.
//
///////////////////////////////////////////////////////////////////////////////

#include <string>
#include <AD/strings/charesc.h>
#include "ir.ph"
#include "ast.ph"
#include "hashtab.h"
#include "type.h"
#include "matchcom.h"

///////////////////////////////////////////////////////////////////////////////
//  Properly quote a string
///////////////////////////////////////////////////////////////////////////////

const char *make_quoted_string( const char * s)
{
  char *new_str = str_pool[strlen(s) * 4];
  *new_str = '"';
  char *end_str = quote_string(new_str+1,s);
  *end_str++ = '"';
  *end_str   = '\0';
  return new_str;
}

///////////////////////////////////////////////////////////////////////////////
//  Add contexts to a string/regexp pattern
///////////////////////////////////////////////////////////////////////////////

Pat add_contexts( Conses contexts, Pat pat)
{
  if (contexts == #[]) return pat;
  match (pat)
  {
  REGEXPpat re:
    {
      char buffer[4096];
      char * p = buffer;
      *p++ = '/';
      *p++ = '<';
      for (Conses l = contexts; l; l = l->#2)
      {
        if (l->#1)
          strcpy( p, l->#1->name);
        p += strlen(p);
        if (l->#2)
          *p++ = ',';
      }
      *p++ = '>';
      strcpy(p,re+1); p += strlen(p) - 1;
      *p = '/';
      debug_msg( "converting %p into %s\n",
                 CONTEXTpat(contexts,pat), buffer);
      Pat new_pat = LITERALpat(REGEXPlit(str_pool[buffer]));
      new_pat->selector = pat->selector;
      new_pat->ty       = pat->ty;
      return new_pat;
    }
  | STRINGpat s:
    {
      return add_contexts(
            contexts, LITERALpat( REGEXPlit( convert_regexp( s))));
    }
  | LEXEMEpat( _, ty, n, cs):
    {
      Pat this_pat = expand_lexeme_pat(pat,ty,n,cs);
      Pat new_pat = NOpat;
      match while (this_pat)
      {
      LOGICALpat(ORpat,a,b):
        {
          Pat one_pat = add_contexts(contexts,b);
          new_pat = new_pat == NOpat ? one_pat
                  : LOGICALpat(ORpat,one_pat,new_pat);
          this_pat = a;
        }
      }
      Pat p = add_contexts(contexts,this_pat);
      new_pat = new_pat == NOpat ? p : LOGICALpat(ORpat,p,new_pat);
      return new_pat;
    }
  | _:
    {
      error( "%Lillegal context(s) in pattern %p\n",
             CONTEXTpat(contexts,pat));
      return pat;
    }
  }
}

///////////////////////////////////////////////////////////////////////////////
//  Convert a string pattern into a regexp pattern if necessary
///////////////////////////////////////////////////////////////////////////////

fun convert_regexp STRINGpat s: Pat:
    { return LITERALpat( REGEXPlit( convert_regexp(s))); }
|   convert_regexp p:
    { return p; }
;

///////////////////////////////////////////////////////////////////////////////
//  Convert a string literal into a regular expression literal.
///////////////////////////////////////////////////////////////////////////////

const char *convert_regexp( const char * string, Bool quotes)
{
  char buf[4096];
  register char * p = buf;
  register const char * s = string + 1;
  if (quotes)
    *p++ = '/';
  while (*s) {
     char c;
     s = parse_char(s,c);
     match (c) // escape all meta characters
     {
       '\\' || '[' || ']' || '*' || '+' || '(' || ')' || '$' ||
       '^'  || '?' || '.' || '{' || '}' || '/' || '<' || '>' ||
       '|':
       { *p++ = '\\'; *p++ = c; }
     | _:
       { p = print_char(p,c); }
     }
  }
  p -= 2;
  if (quotes)
    *p++ = '/';
  *p = '\0';
  debug_msg( "converting %s into %s\n", string, buf);
  return str_pool[buf];
}

///////////////////////////////////////////////////////////////////////////////
//  The global lexeme and lexeme class environments
///////////////////////////////////////////////////////////////////////////////

static HashTable lexeme_env( string_hash, string_equal);
static HashTable lexeme_class_env( string_hash, string_equal);

///////////////////////////////////////////////////////////////////////////////
//  Method to update or lookup from the lexeme class environment
///////////////////////////////////////////////////////////////////////////////

void update_lexeme_class( Id id, TermDefs terms)
{
  if (lexeme_class_env.contains(id))
    error ("%Lredefinition of lexeme class %s\n", id);
  else
    lexeme_class_env.insert( id, terms);
}

TermDefs lookup_lexeme_class( Id id)
{
  HashTable::Entry * e = lexeme_class_env.lookup(id);
  if (e)
    return TermDefs(e->v);
  else
  {
    error("%Llexeme class %s is undefined\n", id);
    return #[];
  }
}

///////////////////////////////////////////////////////////////////////////////
//  Method to expand a pattern taking into account of lexeme definitions.
///////////////////////////////////////////////////////////////////////////////

Pat mk_regexp_pat( const char * re)
{
  const char * p = re;
  char buf[4096];
  char * q = buf;
  if (strchr(re,'{') != 0)
  {
    // skip context
    if (*p == '<')
    {
      do { *q++ = *p; } while (*p && *p++ != '>'); }
      match while (*p)
      {
      '[':
        {
          do { *q++ = *p++; }
          while (p[-1] && (p[-2] == '\\' || p[-1] != ']'));
        }
      | '{':
        {
          char name[256]; char * r;
          for (r = name, p++; *p && *p != '}';) *r++ = *p++;
          if (*p == '}') p++;
          else error ("%Lmissing '}' in regular expression %s\n",re);
          *r = '\0';
          HashTable::Entry * e = lexeme_env.lookup(name);
          if (e)
          {
            Pat pattern = (Pat)e->v;
            match (pattern)
            {
            LITERALpat( REGEXPlit re):
              {
                *q++ = '(';
                strcpy( q, re+1);
                q += strlen(re)-2;
                *q++ = ')';
              }
            | LITERALpat( STRINGlit s):
              {
                *q++ = '(';
                strcpy( q, convert_regexp( s, false));
                q += strlen(q) - 1;
                *q++ = ')';
              }
            | _: // skip
            }
          }
          else
            error ("%Llexeme {%s} is undefined in %s\n", name, re);
        }
      | !'\0':
        {
          char ch;
          const char * r = parse_char(p,ch);
          // if (*p == '\\') *q++ = '\\';
          if (*p == '\\')
          {
            match (ch) // escape all meta characters
              {
              '\\' || '[' || ']' || '*' || '+' || '(' || ')' ||
              '$'  || '^' || '?' || '.' || '{' || '}' || '/' ||
              '<'  || '>' || '|':
                {
                  *q++ = '\\';
                  *q++ = ch;
                }
              | _:
                {  q = print_char( q, ch); }
              }
          }
          else
            q = print_char(q,ch);
          p = r;
        }
    }
    *q++;
    debug_msg( "%s ==> %s\n", re, buf);
    re = buf;
  }
  return LITERALpat(REGEXPlit(str_pool[re]));
}

///////////////////////////////////////////////////////////////////////////////
//  Method to update the lexeme environment.
///////////////////////////////////////////////////////////////////////////////

void update_lexeme( Id id, Ids args, Pat pat)
{
  HashTable::Entry * e = lexeme_env.lookup(id);

  if (e)
    error( "%Llexeme {%s} already defined as %p\n", id, (Pat)e->v);
  else
    lexeme_env.insert( id, pat);
}

///////////////////////////////////////////////////////////////////////////////
//  Method to expand a lexeme pattern into a set of disjunctive patterns.
///////////////////////////////////////////////////////////////////////////////

Pat expand_lexeme_pat( Pat pat, Ty ty, int n, Cons terms[])
{
  match (deref_all(ty))
  {
  NOty: // skip
  | DATATYPEty({ qualifiers ... },_) | ((qualifiers | QUALlexeme) == 0):
    { error ("%Ldatatype %T is not a lexeme type\n", ty); }
  | DATATYPEty({ ... },_):
    {
      Pat disj_pats = NOpat;
      for (int i = 0; i < n; i++)
      {
        match (terms[i])
        {
        ONEcons { lexeme_pattern = p as ! NOpat ... }:
          {
            Pat new_pat = subst(convert_regexp(p),0,true);
            disj_pats = (disj_pats == NOpat) ? new_pat
                        : LOGICALpat(ORpat,disj_pats, new_pat);
            disj_pats->selector = pat->selector;
          }
        | ONEcons { name ... }:
          {
            error ("%Llexeme pattern is undefined for constructor %s\n", name);
          }
        | NOcons: // skip
        }
      }
      return disj_pats;
    }
  | _:  {  error ("%Lnon lexeme type %T in pattern %p\n", ty, pat); }
  }
  return WILDpat();
}
