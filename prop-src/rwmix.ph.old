///////////////////////////////////////////////////////////////////////////////
//
//  This file defines the rewriting partial evaluator
//
///////////////////////////////////////////////////////////////////////////////
#ifndef rewriting_mix_h
#define rewriting_mix_h

#include "ast.h"
#include "ir.h"
#include "rwgen.h"

///////////////////////////////////////////////////////////////////////////////
//
//  The rewriting partial evaluator
//
///////////////////////////////////////////////////////////////////////////////
class RewriteMix : public virtual RewritingCompiler
{  RewriteMix (const RewriteMix&);     // no copy constructor
   void operator = (const RewriteMix&);  // no assignment
private:
   int reduction_limit;
public:
            RewriteMix();
   virtual ~RewriteMix();

   virtual MatchRules optimize_rewrite (Id, MatchRules);

private:
   ////////////////////////////////////////////////////////////////////////////
   //
   //  Private methods
   //
   ////////////////////////////////////////////////////////////////////////////
   enum Result { SUCCESS, FAILURE, UNKNOWN };

   MatchRules mix (MatchRules);

   ////////////////////////////////////////////////////////////////////////////
   //
   //  Pattern matching methods.
   //
   ////////////////////////////////////////////////////////////////////////////
   Result pmatch (Pat, Exp);
   Result pmatch (Pats, Exps);
   Result pmatch (LabPats, LabExps);
   Result pmatch (Exp, MatchRule);

   ////////////////////////////////////////////////////////////////////////////
   //
   //  Normalization methods.
   //
   ////////////////////////////////////////////////////////////////////////////
   Exp normalize (Exp, MatchRules, Bool&);
   Result reduce (Exp, MatchRules, Exp&);

   ////////////////////////////////////////////////////////////////////////////
   //
   //  Simplication methods.
   //
   ////////////////////////////////////////////////////////////////////////////
   Exp simplify  (Exp, Exp = NOexp);
};

#endif
