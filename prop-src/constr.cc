///////////////////////////////////////////////////////////////////////////////
//  This file is generated automatically using Prop (version 2.3.8),
//  last updated on Sep 16, 2005.
//  The original source file is "..\..\prop-src\constr.pcc".
///////////////////////////////////////////////////////////////////////////////

#line 1 "../../prop-src/constr.pcc"
///////////////////////////////////////////////////////////////////////////////
//
//  This file simply instantiates all the datatypes used in the Prop -> C++
//  translator.
//
///////////////////////////////////////////////////////////////////////////////

#include "ir.h"
#include "ast.h"
#include "matchcom.h"

#line 12 "../../prop-src/constr.pcc"
#line 12 "../../prop-src/constr.pcc"
///////////////////////////////////////////////////////////////////////////////
//
// Interface specification of datatype Ty
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Interface specification of datatype TyCon
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Interface specification of datatype Pat
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Interface specification of datatype Exp
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Interface specification of datatype Cons
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Interface specification of datatype Pos
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Interface specification of datatype Match
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Interface specification of datatype Decl
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Interface specification of datatype MatchExp
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Interface specification of datatype Inherit
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Interface specification of datatype Literal
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Interface specification of datatype Cost
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Interface specification of datatype MatchRule
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Interface specification of datatype Protocol
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Interface specification of datatype DatatypeDef
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Interface specification of datatype TyDef
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Interface specification of datatype TermDef
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Interface specification of datatype ViewDef
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Interface specification of datatype LawDef
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Interface specification of datatype FunDef
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Interface specification of datatype QualId
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Interface specification of datatype InferenceRule
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Interface specification of datatype Conclusion
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Interface specification of datatype LogicalPat
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Interface specification of datatype Scope
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Interface specification of datatype Polarity
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Interface specification of datatype List<Ty>
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Interface specification of datatype List<Pat>
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Interface specification of datatype List<Exp>
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Interface specification of datatype List<Pos>
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Interface specification of datatype List<Decl>
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Interface specification of datatype List<Inherit>
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Interface specification of datatype List<MatchExp>
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Interface specification of datatype List<MatchRule>
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Interface specification of datatype List<Protocol>
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Interface specification of datatype List<DatatypeDef>
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Interface specification of datatype List<TyDef>
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Interface specification of datatype List<TermDef>
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Interface specification of datatype List<ViewDef>
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Interface specification of datatype List<LawDef>
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Interface specification of datatype List<FunDef>
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Interface specification of datatype List<QualId>
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Interface specification of datatype List<InferenceRule>
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Interface specification of datatype List<Conclusion>
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Interface specification of datatype List<Scope>
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Interface specification of datatype Pid
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Interface specification of datatype Pair<Id, Tys>
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Interface specification of datatype Generator
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Interface specification of datatype List<Generator>
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Interface specification of datatype List<RewriteIndexing *>
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Instantiation of datatype Ty
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Instantiation of datatype TyCon
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Instantiation of datatype Pat
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Instantiation of datatype Exp
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Instantiation of datatype Cons
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Instantiation of datatype Pos
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Instantiation of datatype Match
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Instantiation of datatype Decl
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Instantiation of datatype MatchExp
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Instantiation of datatype Inherit
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Instantiation of datatype Literal
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Instantiation of datatype Cost
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Instantiation of datatype MatchRule
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Instantiation of datatype Protocol
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Instantiation of datatype DatatypeDef
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Instantiation of datatype TyDef
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Instantiation of datatype TermDef
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Instantiation of datatype ViewDef
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Instantiation of datatype LawDef
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Instantiation of datatype FunDef
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Instantiation of datatype QualId
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Instantiation of datatype InferenceRule
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Instantiation of datatype Conclusion
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Instantiation of datatype LogicalPat
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Instantiation of datatype Scope
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Instantiation of datatype Polarity
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Instantiation of datatype List<Ty>
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"
#ifdef PROP_EXPLICIT_TEMPLATE_INSTANTIATION
template class a_List<Ty>;
template a_List<Ty> * list_1_(RewriteIndexing * x_1, a_List<RewriteIndexing *> *  x_2);
template a_List<Ty> * list_1_(RewriteIndexing * x_list_1_);
template int boxed(const a_List<Ty> *);
template int untag(const a_List<Ty> *);
#endif /* PROP_EXPLICIT_TEMPLATE_INSTANTIATION */

///////////////////////////////////////////////////////////////////////////////
//
// Instantiation of datatype List<Pat>
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"
#ifdef PROP_EXPLICIT_TEMPLATE_INSTANTIATION
template class a_List<Pat>;
template a_List<Pat> * list_1_(Ty x_1, a_List<Ty> *  x_2);
template a_List<Pat> * list_1_(Ty x_list_1_);
template int boxed(const a_List<Pat> *);
template int untag(const a_List<Pat> *);
#endif /* PROP_EXPLICIT_TEMPLATE_INSTANTIATION */

///////////////////////////////////////////////////////////////////////////////
//
// Instantiation of datatype List<Exp>
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"
#ifdef PROP_EXPLICIT_TEMPLATE_INSTANTIATION
template class a_List<Exp>;
template a_List<Exp> * list_1_(Pat x_1, a_List<Pat> *  x_2);
template a_List<Exp> * list_1_(Pat x_list_1_);
template int boxed(const a_List<Exp> *);
template int untag(const a_List<Exp> *);
#endif /* PROP_EXPLICIT_TEMPLATE_INSTANTIATION */

///////////////////////////////////////////////////////////////////////////////
//
// Instantiation of datatype List<Pos>
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"
#ifdef PROP_EXPLICIT_TEMPLATE_INSTANTIATION
template class a_List<Pos>;
template a_List<Pos> * list_1_(Exp x_1, a_List<Exp> *  x_2);
template a_List<Pos> * list_1_(Exp x_list_1_);
template int boxed(const a_List<Pos> *);
template int untag(const a_List<Pos> *);
#endif /* PROP_EXPLICIT_TEMPLATE_INSTANTIATION */

///////////////////////////////////////////////////////////////////////////////
//
// Instantiation of datatype List<Decl>
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"
#ifdef PROP_EXPLICIT_TEMPLATE_INSTANTIATION
template class a_List<Decl>;
template a_List<Decl> * list_1_(Pos x_1, a_List<Pos> *  x_2);
template a_List<Decl> * list_1_(Pos x_list_1_);
template int boxed(const a_List<Decl> *);
template int untag(const a_List<Decl> *);
#endif /* PROP_EXPLICIT_TEMPLATE_INSTANTIATION */

///////////////////////////////////////////////////////////////////////////////
//
// Instantiation of datatype List<Inherit>
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"
#ifdef PROP_EXPLICIT_TEMPLATE_INSTANTIATION
template class a_List<Inherit>;
template a_List<Inherit> * list_1_(Decl x_1, a_List<Decl> *  x_2);
template a_List<Inherit> * list_1_(Decl x_list_1_);
template int boxed(const a_List<Inherit> *);
template int untag(const a_List<Inherit> *);
#endif /* PROP_EXPLICIT_TEMPLATE_INSTANTIATION */

///////////////////////////////////////////////////////////////////////////////
//
// Instantiation of datatype List<MatchExp>
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"
#ifdef PROP_EXPLICIT_TEMPLATE_INSTANTIATION
template class a_List<MatchExp>;
template a_List<MatchExp> * list_1_(Inherit x_1, a_List<Inherit> *  x_2);
template a_List<MatchExp> * list_1_(Inherit x_list_1_);
template int boxed(const a_List<MatchExp> *);
template int untag(const a_List<MatchExp> *);
#endif /* PROP_EXPLICIT_TEMPLATE_INSTANTIATION */

///////////////////////////////////////////////////////////////////////////////
//
// Instantiation of datatype List<MatchRule>
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"
#ifdef PROP_EXPLICIT_TEMPLATE_INSTANTIATION
template class a_List<MatchRule>;
template a_List<MatchRule> * list_1_(MatchExp x_1, a_List<MatchExp> *  x_2);
template a_List<MatchRule> * list_1_(MatchExp x_list_1_);
template int boxed(const a_List<MatchRule> *);
template int untag(const a_List<MatchRule> *);
#endif /* PROP_EXPLICIT_TEMPLATE_INSTANTIATION */

///////////////////////////////////////////////////////////////////////////////
//
// Instantiation of datatype List<Protocol>
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"
#ifdef PROP_EXPLICIT_TEMPLATE_INSTANTIATION
template class a_List<Protocol>;
template a_List<Protocol> * list_1_(MatchRule x_1, a_List<MatchRule> *  x_2);
template a_List<Protocol> * list_1_(MatchRule x_list_1_);
template int boxed(const a_List<Protocol> *);
template int untag(const a_List<Protocol> *);
#endif /* PROP_EXPLICIT_TEMPLATE_INSTANTIATION */

///////////////////////////////////////////////////////////////////////////////
//
// Instantiation of datatype List<DatatypeDef>
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"
#ifdef PROP_EXPLICIT_TEMPLATE_INSTANTIATION
template class a_List<DatatypeDef>;
template a_List<DatatypeDef> * list_1_(Protocol x_1, a_List<Protocol> *  x_2);
template a_List<DatatypeDef> * list_1_(Protocol x_list_1_);
template int boxed(const a_List<DatatypeDef> *);
template int untag(const a_List<DatatypeDef> *);
#endif /* PROP_EXPLICIT_TEMPLATE_INSTANTIATION */

///////////////////////////////////////////////////////////////////////////////
//
// Instantiation of datatype List<TyDef>
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"
#ifdef PROP_EXPLICIT_TEMPLATE_INSTANTIATION
template class a_List<TyDef>;
template a_List<TyDef> * list_1_(DatatypeDef x_1, a_List<DatatypeDef> *  x_2);
template a_List<TyDef> * list_1_(DatatypeDef x_list_1_);
template int boxed(const a_List<TyDef> *);
template int untag(const a_List<TyDef> *);
#endif /* PROP_EXPLICIT_TEMPLATE_INSTANTIATION */

///////////////////////////////////////////////////////////////////////////////
//
// Instantiation of datatype List<TermDef>
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"
#ifdef PROP_EXPLICIT_TEMPLATE_INSTANTIATION
template class a_List<TermDef>;
template a_List<TermDef> * list_1_(TyDef x_1, a_List<TyDef> *  x_2);
template a_List<TermDef> * list_1_(TyDef x_list_1_);
template int boxed(const a_List<TermDef> *);
template int untag(const a_List<TermDef> *);
#endif /* PROP_EXPLICIT_TEMPLATE_INSTANTIATION */

///////////////////////////////////////////////////////////////////////////////
//
// Instantiation of datatype List<ViewDef>
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"
#ifdef PROP_EXPLICIT_TEMPLATE_INSTANTIATION
template class a_List<ViewDef>;
template a_List<ViewDef> * list_1_(TermDef x_1, a_List<TermDef> *  x_2);
template a_List<ViewDef> * list_1_(TermDef x_list_1_);
template int boxed(const a_List<ViewDef> *);
template int untag(const a_List<ViewDef> *);
#endif /* PROP_EXPLICIT_TEMPLATE_INSTANTIATION */

///////////////////////////////////////////////////////////////////////////////
//
// Instantiation of datatype List<LawDef>
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"
#ifdef PROP_EXPLICIT_TEMPLATE_INSTANTIATION
template class a_List<LawDef>;
template a_List<LawDef> * list_1_(ViewDef x_1, a_List<ViewDef> *  x_2);
template a_List<LawDef> * list_1_(ViewDef x_list_1_);
template int boxed(const a_List<LawDef> *);
template int untag(const a_List<LawDef> *);
#endif /* PROP_EXPLICIT_TEMPLATE_INSTANTIATION */

///////////////////////////////////////////////////////////////////////////////
//
// Instantiation of datatype List<FunDef>
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"
#ifdef PROP_EXPLICIT_TEMPLATE_INSTANTIATION
template class a_List<FunDef>;
template a_List<FunDef> * list_1_(LawDef x_1, a_List<LawDef> *  x_2);
template a_List<FunDef> * list_1_(LawDef x_list_1_);
template int boxed(const a_List<FunDef> *);
template int untag(const a_List<FunDef> *);
#endif /* PROP_EXPLICIT_TEMPLATE_INSTANTIATION */

///////////////////////////////////////////////////////////////////////////////
//
// Instantiation of datatype List<QualId>
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"
#ifdef PROP_EXPLICIT_TEMPLATE_INSTANTIATION
template class a_List<QualId>;
template a_List<QualId> * list_1_(FunDef x_1, a_List<FunDef> *  x_2);
template a_List<QualId> * list_1_(FunDef x_list_1_);
template int boxed(const a_List<QualId> *);
template int untag(const a_List<QualId> *);
#endif /* PROP_EXPLICIT_TEMPLATE_INSTANTIATION */

///////////////////////////////////////////////////////////////////////////////
//
// Instantiation of datatype List<InferenceRule>
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"
#ifdef PROP_EXPLICIT_TEMPLATE_INSTANTIATION
template class a_List<InferenceRule>;
template a_List<InferenceRule> * list_1_(QualId x_1, a_List<QualId> *  x_2);
template a_List<InferenceRule> * list_1_(QualId x_list_1_);
template int boxed(const a_List<InferenceRule> *);
template int untag(const a_List<InferenceRule> *);
#endif /* PROP_EXPLICIT_TEMPLATE_INSTANTIATION */

///////////////////////////////////////////////////////////////////////////////
//
// Instantiation of datatype List<Conclusion>
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"
#ifdef PROP_EXPLICIT_TEMPLATE_INSTANTIATION
template class a_List<Conclusion>;
template a_List<Conclusion> * list_1_(InferenceRule x_1, a_List<InferenceRule> *  x_2);
template a_List<Conclusion> * list_1_(InferenceRule x_list_1_);
template int boxed(const a_List<Conclusion> *);
template int untag(const a_List<Conclusion> *);
#endif /* PROP_EXPLICIT_TEMPLATE_INSTANTIATION */

///////////////////////////////////////////////////////////////////////////////
//
// Instantiation of datatype List<Scope>
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"
#ifdef PROP_EXPLICIT_TEMPLATE_INSTANTIATION
template class a_List<Scope>;
template a_List<Scope> * list_1_(Conclusion x_1, a_List<Conclusion> *  x_2);
template a_List<Scope> * list_1_(Conclusion x_list_1_);
template int boxed(const a_List<Scope> *);
template int untag(const a_List<Scope> *);
#endif /* PROP_EXPLICIT_TEMPLATE_INSTANTIATION */

///////////////////////////////////////////////////////////////////////////////
//
// Instantiation of datatype Pid
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Instantiation of datatype Pair<Id, Tys>
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"
#ifdef PROP_EXPLICIT_TEMPLATE_INSTANTIATION
template class a_Pair<Id, Tys>;
template a_Pair<Id, Tys> * makepair(Id x_fst, Tys x_snd);
template int boxed(const a_Pair<Id, Tys> *);
template int untag(const a_Pair<Id, Tys> *);
#endif /* PROP_EXPLICIT_TEMPLATE_INSTANTIATION */

///////////////////////////////////////////////////////////////////////////////
//
// Instantiation of datatype Generator
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"


///////////////////////////////////////////////////////////////////////////////
//
// Instantiation of datatype List<Generator>
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"
#ifdef PROP_EXPLICIT_TEMPLATE_INSTANTIATION
template class a_List<Generator>;
template a_List<Generator> * list_1_(Scope x_1, a_List<Scope> *  x_2);
template a_List<Generator> * list_1_(Scope x_list_1_);
template int boxed(const a_List<Generator> *);
template int untag(const a_List<Generator> *);
#endif /* PROP_EXPLICIT_TEMPLATE_INSTANTIATION */

///////////////////////////////////////////////////////////////////////////////
//
// Instantiation of datatype List<RewriteIndexing *>
//
///////////////////////////////////////////////////////////////////////////////
#line 12 "../../prop-src/constr.pcc"
#ifdef PROP_EXPLICIT_TEMPLATE_INSTANTIATION
template class a_List<RewriteIndexing *>;
template a_List<RewriteIndexing *> * list_1_(Generator x_1, a_List<Generator> *  x_2);
template a_List<RewriteIndexing *> * list_1_(Generator x_list_1_);
template int boxed(const a_List<RewriteIndexing *> *);
template int untag(const a_List<RewriteIndexing *> *);
#endif /* PROP_EXPLICIT_TEMPLATE_INSTANTIATION */

#line 23 "../../prop-src/constr.pcc"
#line 23 "../../prop-src/constr.pcc"

#line 24 "../../prop-src/constr.pcc"
/*
------------------------------- Statistics -------------------------------
Merge matching rules         = yes
Number of DFA nodes merged   = 0
Number of ifs generated      = 0
Number of switches generated = 0
Number of labels             = 0
Number of gotos              = 0
Adaptive matching            = disabled
Fast string matching         = disabled
Inline downcasts             = disabled
--------------------------------------------------------------------------
*/
