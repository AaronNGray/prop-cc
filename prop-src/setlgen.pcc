///////////////////////////////////////////////////////////////////////////////
//
//  This file implements the data structure mapping component of the
//  SETL sublanguage.
//
///////////////////////////////////////////////////////////////////////////////

#include "ir.ph"
#include "ast.ph"
#include "setl-ast.ph"
#include "setlgen.h"
#include "type.h"

///////////////////////////////////////////////////////////////////////////////
//
//  Constructor and destructor
//
///////////////////////////////////////////////////////////////////////////////

SETLCompiler:: SETLCompiler() {}
SETLCompiler::~SETLCompiler() {}

///////////////////////////////////////////////////////////////////////////////
//
//  Entry points of the SETL data structure mapping compiler
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Generate a SETL statement
//
///////////////////////////////////////////////////////////////////////////////

void SETLCompiler::gen_setl( Stmt stmt)
{
  bug("SETL sublanguage is not implemented");
  gen_stmt(stmt);
}

///////////////////////////////////////////////////////////////////////////////
//
//  Generate a SETL definition
//
///////////////////////////////////////////////////////////////////////////////

void SETLCompiler::gen_setl( Def def)
{
  pr( "%^/*\n");
  gen_def( def);
  pr( "%^*/\n");
}

///////////////////////////////////////////////////////////////////////////////
//
//  Code generation method for definitions
//
///////////////////////////////////////////////////////////////////////////////

void SETLCompiler::gen_def(Def def)
{
}

///////////////////////////////////////////////////////////////////////////////
//
//  Code generation method for a list of definitions
//
///////////////////////////////////////////////////////////////////////////////

void SETLCompiler::gen_defs( Defs defs)
{
  match while (defs)
  {
    #[ one ... rest ]: { gen_def( one); defs = rest; }
  }
}

///////////////////////////////////////////////////////////////////////////////
//
//  Code generation method for statements
//
///////////////////////////////////////////////////////////////////////////////

void SETLCompiler::gen_stmt( Stmt stmt)
{
  match (stmt) of
    NOstmt: // skip
  | ASSIGNstmt(a,b):
  | BLOCKstmt(defs,stmts):
  | WHILEstmt(c, s):
  | IFstmt(cond,yes,no):
  | MATCHstmt decl:        pr( "%D",decl);
  | REWRITEstmt decl:      pr( "%D",decl);
  | REPLACEMENTstmt decl:  pr( "%D",decl);
  | FORALLstmt (_,_): // skip
  | RETURNstmt e:          pr( "return %e;",e);
  end match;
}

///////////////////////////////////////////////////////////////////////////////
//
//  Code generation method for a list of statements
//
///////////////////////////////////////////////////////////////////////////////

void SETLCompiler::gen_stmts( Stmts stmts)
{
  match while (stmts)
  {
    #[ one ... rest ]: { gen_stmt(one); stmts = rest; }
  }
}

///////////////////////////////////////////////////////////////////////////////
//
//  Code generation method for expressions
//
///////////////////////////////////////////////////////////////////////////////

void SETLCompiler::gen_exp( Exp exp)
{
}

///////////////////////////////////////////////////////////////////////////////
//
//  Code generation method for an expression list
//
///////////////////////////////////////////////////////////////////////////////

void SETLCompiler::gen_exps( Exps exps)
{
  match while (exps)
  {
    #[one]:           { gen_exp(one); exps = #[]; }
  | #[one ... rest]:  { gen_exp(one); exps = rest; }
  }
}
