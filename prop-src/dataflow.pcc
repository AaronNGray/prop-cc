///////////////////////////////////////////////////////////////////////////////
//
//  This file implements the dataflow analyzer generator.
//
///////////////////////////////////////////////////////////////////////////////

#include <iostream>
#include "basics.ph"
#include "dataflow.ph"
#include "type.h"
#include "ir.ph"


///////////////////////////////////////////////////////////////////////////////
//
//  Instantiate the Prop datatypes.
//
///////////////////////////////////////////////////////////////////////////////

instantiate datatype Domain, List<Domain>;

///////////////////////////////////////////////////////////////////////////////
//
//  Pretty printer for a sequence of domains.
//
///////////////////////////////////////////////////////////////////////////////

std::ostream& print_domains( std::ostream& f, Id sep, Domains d)
{
  match while (d) of
    #[ ]:              { return f; }
  | #[ one ]:          { return f << one; }
  | #[ one ... rest ]: { f << one << sep; d = rest; }
  end match;
}

///////////////////////////////////////////////////////////////////////////////
//
//  Pretty printer for domains.
//
///////////////////////////////////////////////////////////////////////////////

std::ostream& operator << (std::ostream& f, Domain d)
{
  match (d) of
    UNITdom:        { f << "unit"; }
  | FINSETdom ty:   { f << "setof<" << ty << ">"; }
  | LIFTdom d:      { f << "lift<" << d << ">"; }
  | SUMdom d:       { print_domains(f," + ",d); }
  | PRODUCTdom d:   { print_domains(f," * ",d); }
  end match;
  return f;
}

///////////////////////////////////////////////////////////////////////////////
//
//  The dataflow class
//
///////////////////////////////////////////////////////////////////////////////

DataflowClass::DataflowClass( Id id, Inherits i, TyQual q, Decls d)
    : ClassDefinition( DATAFLOW_CLASS,
	    id, #[], add_inherit( "DataflowBase", #[], i), q, d) {}
DataflowClass::~DataflowClass() {}

void DataflowClass::gen_class_interface( CodeGen& C)
{
}

///////////////////////////////////////////////////////////////////////////////
//
//  Constructor and destructor for the dataflow compiler.
//
///////////////////////////////////////////////////////////////////////////////

DataflowCompiler:: DataflowCompiler () {}
DataflowCompiler::~DataflowCompiler () {}
