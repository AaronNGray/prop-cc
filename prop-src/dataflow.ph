///////////////////////////////////////////////////////////////////////////////
//
//  This file contains the interface of the dataflow analyzer generator.
//
///////////////////////////////////////////////////////////////////////////////

#ifndef dataflow_analyzer_generator_h
#define dataflow_analyzer_generator_h

#include "basics.ph"
#include "codegen.h"
#include "classdef.h"

///////////////////////////////////////////////////////////////////////////////
//
//  Forward type definitions
//
///////////////////////////////////////////////////////////////////////////////

datatype Ty and Exp;

///////////////////////////////////////////////////////////////////////////////
//
//  Datatype 'Domain' is denotes the structure of an abstract domain.
//
///////////////////////////////////////////////////////////////////////////////

datatype Domain : public Loc =
    UNITdom                 // unit
  | FINSETdom    Ty         // finite set of a type
  | LIFTdom      Domain     // lifted domain
  | SUMdom       Domains    // sum domain
  | PRODUCTdom   Domains    // product domain

where type Domains = List<Domain>  // a sequence of domains.
;

///////////////////////////////////////////////////////////////////////////////
//
//  Pretty printing methods
//
///////////////////////////////////////////////////////////////////////////////

extern std::ostream& operator << (std::ostream&, Domain);

///////////////////////////////////////////////////////////////////////////////
//
//  Dataflow class definitions
//
///////////////////////////////////////////////////////////////////////////////

class DataflowClass : public ClassDefinition
{
  DataflowClass(const DataflowClass&);
  void operator = (const DataflowClass&);
public:
  DataflowClass(Id, Inherits, TyQual, Decls);
  ~DataflowClass();
  virtual void gen_class_interface(CodeGen&);
};

///////////////////////////////////////////////////////////////////////////////
//
//  The interface of the dataflow analyzer compiler.
//
///////////////////////////////////////////////////////////////////////////////

class DataflowCompiler : public virtual CodeGen
{
  DataflowCompiler(const DataflowCompiler&);
  void operator = (const DataflowCompiler&);
public:
  ////////////////////////////////////////////////////////////////////////////
  //
  //  Constructor and destructor
  //
  ////////////////////////////////////////////////////////////////////////////
  DataflowCompiler ();
  virtual ~DataflowCompiler ();
};

#endif
