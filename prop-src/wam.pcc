///////////////////////////////////////////////////////////////////////////////
//
//  This file implements the helper routines for the
//  constraint compiler, which is based (very, very, I mean, very)
//  loosely on the Warren Abstract Machine (WAM).
//
///////////////////////////////////////////////////////////////////////////////

#include <iostream>
#include "basics.ph"
#include "wam.ph"
#include "type.h"
#include "ir.ph"


///////////////////////////////////////////////////////////////////////////////
//
//  Instantiate the datatypes
//
///////////////////////////////////////////////////////////////////////////////

instantiate datatype VarKind, WAM, Label, List<WAM>, List<Label>,
                     Instness, Determinism;

///////////////////////////////////////////////////////////////////////////////
//
//  Utility routines.
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Dereference a determinism variable.
//
///////////////////////////////////////////////////////////////////////////////

Determinism deref (Determinism det)
{
  match while (det) { VAR_DET (d as ! UNKNOWN_DET): { det = d; } }
  return det;
}

///////////////////////////////////////////////////////////////////////////////
//
//  Dereference an instantiatedness variable.
//
///////////////////////////////////////////////////////////////////////////////

Instness deref (Instness inst)
{
  match while (inst) { VARinst (i as ! NOinst): { inst = i; } }
  return inst;
}

///////////////////////////////////////////////////////////////////////////////
//
//  Pretty print the determinism.
//
///////////////////////////////////////////////////////////////////////////////

std::ostream& operator << (std::ostream& f, Determinism d)
{
  match (deref d)
  {
      UNKNOWN_DET:  { f << "unknown"; }
    | DET:          { f << "det"; }
    | SEMI_DET:     { f << "semidet"; }
    | MULTI_DET:    { f << "multidet"; }
    | NON_DET:      { f << "nondet"; }
    | FAIL_DET:     { f << "fail"; }
    | ERROR_DET:    { f << "error"; }
    | VAR_DET _:    { f << "???"; }
  }
  return f;
}

///////////////////////////////////////////////////////////////////////////////
//
//  Instantiateness analysis.
//
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//
//  Determinism analysis.
//
///////////////////////////////////////////////////////////////////////////////
