///////////////////////////////////////////////////////////////////////////////
//
//  This file implements the graph object class
//
///////////////////////////////////////////////////////////////////////////////

#include <AD/graph/graph.h>
#include <AD/graph/node.h>
#include <AD/graph/edge.h>
#include <AD/memory/mem.h>

///////////////////////////////////////////////////////////////////////////////
//
//  Type abbreviations
//
///////////////////////////////////////////////////////////////////////////////

typedef GraphObject::NodeLabel Label;
typedef GraphObject Graph;
typedef NodeObject * Node;
typedef EdgeObject * Edge;

#include "graphinline.h"

///////////////////////////////////////////////////////////////////////////////
//
//  Initialization method
//
///////////////////////////////////////////////////////////////////////////////

void Graph::init()
{
  next_label      = 0;
  number_of_nodes = 0;
  number_of_edges = 0;
}

///////////////////////////////////////////////////////////////////////////////
//
//  Cleanup method
//
///////////////////////////////////////////////////////////////////////////////

void Graph::cleanup()
{}

///////////////////////////////////////////////////////////////////////////////
//
//   Constructors and destructor
//
///////////////////////////////////////////////////////////////////////////////

GraphObject::GraphObject() : mem(Mem::system_mem())
{
  init();
}

GraphObject::GraphObject(Mem& m) : mem(m)
{
  init();
}

GraphObject::GraphObject(const Graph& G)
    : mem(G.mem)
{
  init();
  *this = G;
}

GraphObject::~GraphObject()
{
  cleanup();
}

///////////////////////////////////////////////////////////////////////////////
//
//   Method to get a new node label
//
///////////////////////////////////////////////////////////////////////////////

Label GraphObject::get_label()
{
  Label next = Label(1 + int(next_label));
  return next_label = next;
}

///////////////////////////////////////////////////////////////////////////////
//
//   Method to add a new node
//
///////////////////////////////////////////////////////////////////////////////

GraphObject& GraphObject::operator += (Node node)
{
  node_set.add_node(node);
  succ_map.add_node(node);
  pred_map.add_node(node);
  number_of_nodes++;
  return *this;
}

///////////////////////////////////////////////////////////////////////////////
//
//   Method to add a new edge
//
///////////////////////////////////////////////////////////////////////////////

GraphObject& GraphObject::operator += (Edge edge)
{
  succ_map[edge->src()]->add_edge(edge);
  pred_map[edge->dst()]->add_edge(edge);
  number_of_edges++;
  return *this;
}
